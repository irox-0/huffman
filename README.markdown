
# Huffman Coding Project

This project implements the Huffman coding algorithm for text compression and decompression in Java, specifically for ASCII characters. It provides two modes: encoding and decoding.

## Features

- **Encoding Mode**: Takes a text input, builds a frequency table, constructs a Huffman tree, generates Huffman codes, and encodes the text.
- **Decoding Mode**: Takes a code and a code table to decode the text back to its original form.

## How to Run

You can run this project either using IntelliJ IDEA or directly from the command line.

### Option 1: Using IntelliJ IDEA (Recommended)
1. **Open Project**:
   - Launch IntelliJ IDEA
   - Select `File` → `Open...` and navigate to the project directory
   - Select the project folder and click `OK`

2. **Configure Project**:
   - Make sure IntelliJ recognizes it as a Maven project
   - Ensure Lombok plugin is installed and enabled:
     - Go to `File` → `Settings` → `Plugins`
     - Search for "Lombok" and install if not present
     - Enable annotation processing: `Settings` → `Build, Execution, Deployment` → `Compiler` → `Annotation Processors` → Check `Enable annotation processing`

3. **Run the Project**:
   - Open `Main.java` in `src/main/java`
   - Right-click in the editor and select `Run 'Main.main()'`
   - Follow the prompts in the console

### Option 2: Using Command Line (Maven Required)
1. **Prerequisites**:
   - Install [Java JDK 21](https://adoptium.net/)
   - Install [Maven](https://maven.apache.org/install.html)

2. **Run the Project**:
```bash
# Clone the repository
git clone https://github.com/irox-0/huffman.git
cd huffman

# Clone the repository
git clone https://github.com/irox-0/huffman.git
cd huffman

# Build and run
mvn clean package
mvn exec:java -Dexec.mainClass="Main"
```
### Encoding Mode

1. Enter the text you want to encode when prompted.
2. The program will display the code table and the encoded text.

### Decoding Mode

1. Enter the number of letters in the code table.
2. Enter the code table in the format "letter: code" for each letter.
3. Enter the code to be decoded.
4. The program will output the decoded text.

## File Structure

- `Main.java`: Contains the `main` method and handles user interaction.
- `HuffmanNode.java`: Defines the `HuffmanNode` class used in the Huffman tree.
- `HuffmanUtils.java`: Contains utility methods for building the frequency array, priority queue, Huffman tree, generating codes, encoding, and decoding.

## Implementation Details

This project implements the Huffman coding algorithm for text compression and decompression, working with ASCII characters. The implementation is divided into three main components:

- **Main.java**: Handles user interaction, allowing the user to choose between encoding and decoding modes.
- **HuffmanNode.java**: Defines the structure of the nodes used in the Huffman tree. Each node contains a character, its frequency, and references to its left and right children.
- **HuffmanUtils.java**: Contains the core logic of the Huffman algorithm, including:
  - **buildFrequencyArray**: Counts the frequency of each ASCII character in the text using an array of size 256.
  - **buildPriorityQueue**: Creates a priority queue of Huffman nodes, ordered by frequency.
  - **buildTree**: Constructs the Huffman tree by repeatedly merging the two nodes with the lowest frequencies until only one node remains.
  - **generateCodes**: Traverses the Huffman tree to generate binary codes for each character, assigning '0' for left branches and '1' for right branches.
  - **encodeText**: Encodes the input text by replacing each character with its corresponding Huffman code.
  - **decodeCode**: Decodes the binary string back to the original text using the provided code table.

### Encoding Process
1. The frequency of each character in the input text is calculated.
2. A priority queue is created, with nodes ordered by their frequency.
3. The Huffman tree is built by repeatedly merging the two nodes with the lowest frequencies.
4. Huffman codes are generated by traversing the tree from the root to each leaf.
5. The text is encoded by replacing each character with its Huffman code.

### Decoding Process
1. The user provides a code table that maps binary codes to characters.
2. The encoded binary string is decoded by matching sequences of bits to the codes in the table.

This implementation is efficient, with a time complexity of O(n log n) for encoding, where n is the number of unique characters. Additionally, the decoding process operates in O(m) time, where m is the length of the encoded string. It serves as a practical example of the Huffman coding algorithm in Java.

## TODO

- Implement test cases to ensure the correctness of the encoding and decoding processes.
- Handle edge cases such as empty input, single character input, and invalid codes during decoding.
